// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  clerkId      String  @unique
  email        String  @unique
  name         String?
  contact      String?
  address      String?
  location     String?
  profileImage String?
  role         String  @default("user")

  // relations for other colleciton 
  vehicles      Vehicle[]
  favourites    Favourite[]
  views         View[]
  notifications Notification[]

  chatRoomsInitiated ChatRoom[] @relation("ChatRoomsA") // Chat rooms initiated by this user
  chatRoomsReceived  ChatRoom[] @relation("ChatRoomsB") // Chat rooms received by this user
  sentMessages       Message[]  @relation("SentMessages") // One-to-many: messages sent by the user
  receivedMessages   Message[]  @relation("ReceivedMessages") // One-to-many: messages received by the user

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  slug          String        @unique
  subCategories SubCategory[]
  vehicles      Vehicle[]
}

model SubCategory {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  slug       String    @unique
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id])
  vehicles   Vehicle[]
}

model Vehicle {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  make          String
  model         String
  year          Int
  price         Float
  categoryId    String
  subCategoryId String
  ownerId       String

  owner       User        @relation(fields: [ownerId], references: [clerkId])
  category    Category    @relation(fields: [categoryId], references: [id])
  subCategory SubCategory @relation(fields: [subCategoryId], references: [id])

  coverImage   String
  images       String @default("[]")
  status       String @default("pending")
  report       String @default("low-mileage")
  location     String
  state        String
  district     String
  postalCode   String
  mileage      String
  engine       String
  transmission String

  favourites    Favourite[]
  views         View[]
  notifications Notification[]
  chatRooms     ChatRoom[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([make])
}

model Favourite {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  vehicleId String
  user      User    @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, vehicleId])
}

model View {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  vehicleId String
  user      User    @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, vehicleId])
}

model Notification {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  message String
  userId  String
  user    User   @relation(fields: [userId], references: [clerkId])

  type   String
  status String @default("pending")

  vehicleId String?
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])

  isRead Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatRoom {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  userAId        String
  userBId        String
  chatRoomName   String
  chatProfilePic String

  vehicleId String?
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])

  userA User @relation("ChatRoomsA", fields: [userAId], references: [clerkId])
  userB User @relation("ChatRoomsB", fields: [userBId], references: [clerkId])

  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userAId, userBId])
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  chatRoomId String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])

  senderId String
  sender   User   @relation("SentMessages", fields: [senderId], references: [clerkId], onDelete: Cascade) // Relation for sent messages

  receiverId String
  receiver   User   @relation("ReceivedMessages", fields: [receiverId], references: [clerkId], onDelete: Cascade) // Relation for received messages

  content   String
  delivered Boolean @default(false)
  read      Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  message   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

